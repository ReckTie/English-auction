/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  EnglishAuction,
  EnglishAuctionInterface,
} from "../EnglishAuction";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_product",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
    ],
    name: "Bid",
    outputs: [
      {
        internalType: "string",
        name: "isExecuted",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "buyer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "product",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105d13803806105d183398101604081905261002f916100f7565b815161004290600090602085019061005e565b5060015550600280546001600160a01b03191633179055610220565b82805461006a906101cf565b90600052602060002090601f01602090048101928261008c57600085556100d2565b82601f106100a557805160ff19168380011785556100d2565b828001600101855582156100d2579182015b828111156100d25782518255916020019190600101906100b7565b506100de9291506100e2565b5090565b5b808211156100de57600081556001016100e3565b6000806040838503121561010a57600080fd5b82516001600160401b038082111561012157600080fd5b818501915085601f83011261013557600080fd5b8151818111156101475761014761020a565b604051601f8201601f19908116603f0116810190838211818310171561016f5761016f61020a565b8160405282815260209350888484870101111561018b57600080fd5b600091505b828210156101ad5784820184015181830185015290830190610190565b828211156101be5760008484830101525b969092015195979596505050505050565b600181811c908216806101e357607f821691505b6020821081141561020457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6103a28061022f6000396000f3fe60806040526004361061005a5760003560e01c80638da5cb5b116100435780638da5cb5b146100d6578063a035b1fe14610103578063bf9ce9521461012757600080fd5b80637150d8ae1461005f5780637a183e84146100b6575b600080fd5b34801561006b57600080fd5b5060035461008c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c96100c43660046102aa565b61013c565b6040516100ad91906102c3565b3480156100e257600080fd5b5060025461008c9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561010f57600080fd5b5061011960015481565b6040519081526020016100ad565b34801561013357600080fd5b506100c961021c565b606060015482106101945760405162461bcd60e51b815260206004820152601560248201527f4e6f742061206869676820656e6f75676820626964000000000000000000000060448201526064015b60405180910390fd5b4782116101e35760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768206d6f6e657920746f20626964000000000000000000604482015260640161018b565b505060408051808201909152601481527f596f757220626964206973206163636570746564000000000000000000000000602082015290565b6000805461022990610318565b80601f016020809104026020016040519081016040528092919081815260200182805461025590610318565b80156102a25780601f10610277576101008083540402835291602001916102a2565b820191906000526020600020905b81548152906001019060200180831161028557829003601f168201915b505050505081565b6000602082840312156102bc57600080fd5b5035919050565b600060208083528351808285015260005b818110156102f0578581018301518582016040015282016102d4565b81811115610302576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061032c57607f821691505b60208210811415610366577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220ab206e428372a5f95cfa5b0fc3cc801bfa7b2dfa5e02489859b41419b748b57864736f6c63430008070033";

type EnglishAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EnglishAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EnglishAuction__factory extends ContractFactory {
  constructor(...args: EnglishAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _product: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EnglishAuction> {
    return super.deploy(
      _product,
      _price,
      overrides || {}
    ) as Promise<EnglishAuction>;
  }
  override getDeployTransaction(
    _product: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_product, _price, overrides || {});
  }
  override attach(address: string): EnglishAuction {
    return super.attach(address) as EnglishAuction;
  }
  override connect(signer: Signer): EnglishAuction__factory {
    return super.connect(signer) as EnglishAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EnglishAuctionInterface {
    return new utils.Interface(_abi) as EnglishAuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EnglishAuction {
    return new Contract(address, _abi, signerOrProvider) as EnglishAuction;
  }
}
